{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Phillies Question 2\n",
    "Author: Caroline Graham"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import library\n",
    "import requests #for accessing/scaping webpage\n",
    "import lxml.html as lh\n",
    "import pandas as pd #for data analysis\n",
    "import locale #for currency formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the website (each reload should update GUI/change average)\n",
    "url='https://questionnaire-148920.appspot.com/swe/data.html'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pd.options.display.max_rows = 2000\n",
    "#cite: https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cite for website scraping from: https://towardsdatascience.com/web-scraping-html-tables-with-python-c9baba21059\n",
    "\n",
    "#create page\n",
    "page = requests.get(url)\n",
    "\n",
    "#store website contents under doc\n",
    "doc = lh.fromstring(page.content)\n",
    "\n",
    "#parse data between <tr>..</tr> where the table is located in the html \n",
    "tr_elements = doc.xpath('//tr')\n",
    "\n",
    "#check len of the first 20 rows (should be the same aka 4)\n",
    "[len(T) for T in tr_elements[:20]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1:\"Players\"\n",
      "2:\"Salary\"\n",
      "3:\"Years\"\n",
      "4:\"Level\"\n"
     ]
    }
   ],
   "source": [
    "#create empty list\n",
    "col=[]\n",
    "i=0\n",
    "#since the method used in the reference wasn't working as anticipated, I decided to \n",
    "#hardcode the headers since it was stated the format of the table wouldn't change\n",
    "#if the format had the potential to be dynamic, however, this would have to be fixed\n",
    "headers = [\"Players\", \"Salary\", \"Years\", \"Level\"]\n",
    "\n",
    "#for each row, store header and empty list\n",
    "for t in tr_elements[0]:\n",
    "    name = headers[0+i]\n",
    "    i += 1 #increment to next col\n",
    "    print('%d:\"%s\"'%(i , name)) #check that headers are implemented correctly \n",
    "    col.append((name , []))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get data for each row \n",
    "for j in range(0,len(tr_elements)):\n",
    "    #T is the j'th row\n",
    "    T = tr_elements[j]\n",
    "    \n",
    "    #check if //tr len is 4\n",
    "    if len(T)!= 4:\n",
    "        break\n",
    "    \n",
    "    #col index from 0-3\n",
    "    i=0\n",
    "    #iterate thru each element of the row\n",
    "    for t in T.iterchildren():\n",
    "        data = t.text_content() #get data from html\n",
    "        #Check if row is empty\n",
    "        if i > 0:\n",
    "        #convert any numerical value to integers (should only be year)\n",
    "            try:\n",
    "                data=int(data)\n",
    "            except:\n",
    "                pass\n",
    "        #append the data to the empty list of i'th column\n",
    "        #REVISE THIS- want to skip any row missing salary \n",
    "        if data == 'no salary data' or data == None or data == '':\n",
    "                data = -1\n",
    "        col[i][1].append(data)\n",
    "        #move on to next col\n",
    "        i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1208, 1208, 1208, 1208]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#length of each col (should be the same)\n",
    "[len(C) for (title,C) in col]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "Table = {title:column for (title,column) in col}\n",
    "df=pd.DataFrame(Table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Players</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Years</th>\n",
       "      <th>Level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abreu, Jose</td>\n",
       "      <td>$11,666,667</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Acevedo, Andury</td>\n",
       "      <td>$507,500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ackley, Dustin</td>\n",
       "      <td>$3,200,000</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adames, Cristhian</td>\n",
       "      <td>$507,500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adams, Austin</td>\n",
       "      <td>$507,500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Players       Salary  Years Level\n",
       "0        Abreu, Jose  $11,666,667   2016   MLB\n",
       "1    Acevedo, Andury     $507,500   2016   MLB\n",
       "2     Ackley, Dustin   $3,200,000   2016   MLB\n",
       "3  Adames, Cristhian     $507,500   2016   MLB\n",
       "4      Adams, Austin     $507,500   2016   MLB"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#display beginning of table (prior to cleaning up fields)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean up salary field\n",
    "df['Salary'] = df['Salary'].str.replace(',', '')\n",
    "df['Salary'] = df['Salary'].str.replace('$', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Players</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Years</th>\n",
       "      <th>Level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abreu, Jose</td>\n",
       "      <td>11666667</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Acevedo, Andury</td>\n",
       "      <td>507500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ackley, Dustin</td>\n",
       "      <td>3200000</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adames, Cristhian</td>\n",
       "      <td>507500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adams, Austin</td>\n",
       "      <td>507500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1203</th>\n",
       "      <td>Zimmerman, Ryan</td>\n",
       "      <td>14000000</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1204</th>\n",
       "      <td>Zimmermann, Jordan</td>\n",
       "      <td>18000000</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1205</th>\n",
       "      <td>Zobrist, Ben</td>\n",
       "      <td>10500000</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1206</th>\n",
       "      <td>Zunino, Mike</td>\n",
       "      <td>507500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1207</th>\n",
       "      <td>Zych, Tony</td>\n",
       "      <td>507500</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1208 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Players    Salary  Years Level\n",
       "0            Abreu, Jose  11666667   2016   MLB\n",
       "1        Acevedo, Andury    507500   2016   MLB\n",
       "2         Ackley, Dustin   3200000   2016   MLB\n",
       "3      Adames, Cristhian    507500   2016   MLB\n",
       "4          Adams, Austin    507500   2016   MLB\n",
       "...                  ...       ...    ...   ...\n",
       "1203     Zimmerman, Ryan  14000000   2016   MLB\n",
       "1204  Zimmermann, Jordan  18000000   2016   MLB\n",
       "1205        Zobrist, Ben  10500000   2016   MLB\n",
       "1206        Zunino, Mike    507500   2016   MLB\n",
       "1207          Zych, Tony    507500   2016   MLB\n",
       "\n",
       "[1208 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       11666667.0\n",
       "1         507500.0\n",
       "2        3200000.0\n",
       "3         507500.0\n",
       "4         507500.0\n",
       "           ...    \n",
       "1203    14000000.0\n",
       "1204    18000000.0\n",
       "1205    10500000.0\n",
       "1206      507500.0\n",
       "1207      507500.0\n",
       "Name: Salary, Length: 1208, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#convert to float\n",
    "df['Salary'].astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sort by salary descending order \n",
    "df['Salary'] = pd.to_numeric(df['Salary'], errors='coerce') #despite dtype: float64, this is what seemed to actually convert to float\n",
    "#cite: https://stackoverflow.com/questions/47914274/pandas-sort-values-does-not-sort-numbers-correctly\n",
    "df = df.sort_values(by=['Salary'], ascending = False) #largest salaries are now at the top "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Players</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Years</th>\n",
       "      <th>Level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>583</th>\n",
       "      <td>Kershaw, Clayton</td>\n",
       "      <td>34571429.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>449</th>\n",
       "      <td>Greinke, Zack</td>\n",
       "      <td>34000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>Price, David</td>\n",
       "      <td>30000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>471</th>\n",
       "      <td>Hamilton, Josh</td>\n",
       "      <td>28410000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1133</th>\n",
       "      <td>Verlander, Justin</td>\n",
       "      <td>28000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>Happ, J.A.</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>Kendrick, Howie</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>517</th>\n",
       "      <td>Holland, Derek</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>Darvish, Yu</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>322</th>\n",
       "      <td>Encarnacion, Edwin</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MLB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>125 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Players      Salary  Years Level\n",
       "583     Kershaw, Clayton  34571429.0   2016   MLB\n",
       "449        Greinke, Zack  34000000.0   2016   MLB\n",
       "871         Price, David  30000000.0   2016   MLB\n",
       "471       Hamilton, Josh  28410000.0   2016   MLB\n",
       "1133   Verlander, Justin  28000000.0   2016   MLB\n",
       "...                  ...         ...    ...   ...\n",
       "476           Happ, J.A.  10000000.0   2016   MLB\n",
       "580      Kendrick, Howie  10000000.0   2016   MLB\n",
       "517       Holland, Derek  10000000.0   2016   MLB\n",
       "257          Darvish, Yu  10000000.0   2016   MLB\n",
       "322   Encarnacion, Edwin  10000000.0   2016   MLB\n",
       "\n",
       "[125 rows x 4 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#narrow list down to top 125\n",
    "df = df.head(125)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "$16,522,394.14\n"
     ]
    }
   ],
   "source": [
    "#get the average salary\n",
    "average = df['Salary'].mean()\n",
    "locale.setlocale(locale.LC_ALL, '') #for formatting to currency \n",
    "average = locale.currency(average, grouping=True)\n",
    "print(average) #will not be consistent as data is dynamic "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make json file to then be used by gui (phase2)\n",
    "df.to_json('Phillies.json')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Making GUI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk #gui\n",
    "import requests\n",
    "import tkinter.font as tkFont #custom fonts\n",
    "\n",
    "#canvas dimensions\n",
    "HEIGHT = 600\n",
    "WIDTH = 900\n",
    "\n",
    "#root (welcome page)\n",
    "root = tk.Tk()\n",
    "root.minsize(WIDTH,HEIGHT)\n",
    "\n",
    "#for displaying the calculated average \n",
    "#cite: https://stackoverflow.com/questions/2603169/update-tkinter-label-from-variable\n",
    "var = tk.StringVar()\n",
    "var.set(average)\n",
    "\n",
    "#custom fonts\n",
    "font1 = tkFont.Font(family=\"Segoe UI Light\",size=16) #bold and large\n",
    "root.font=font1\n",
    "font2 = tkFont.Font(family=\"Segoe UI Light\",size=24)\n",
    "root.font2 = font2\n",
    "\n",
    "#create canvas\n",
    "canvas = tk.Canvas(root, height=HEIGHT, width=WIDTH)\n",
    "canvas.pack()\n",
    "\n",
    "#title and icon \n",
    "root.title(\"Phillies Qualifying Offer: One Year Contract\")\n",
    "root.iconbitmap(\"philliesicon.ico\")\n",
    "\n",
    "#background image\n",
    "bg_image = tk.PhotoImage(file='transparent_bg5.gif')\n",
    "root.bg_image = bg_image\n",
    "background_label = tk.Label(root, image=bg_image)\n",
    "background_label.place(relwidth=1, relheight=1)\n",
    "\n",
    "#frame that holds the labels and buttons \n",
    "frame1 = tk.Frame(root, bg = \"white\",  borderwidth=2, relief=\"groove\")\n",
    "frame1.place(relx=0.2, rely=0.3, relwidth=0.6, relheight=0.4)\n",
    "\n",
    "#labels\n",
    "label = tk.Label(frame1, text=\"2016 qualifying offer\", bg=\"white\",font=\"font2\")\n",
    "label.place(relx=0.05, rely=0.1, relwidth=0.9, relheight=0.25)\n",
    "\n",
    "\n",
    "'''welcome page: BEGIN button event'''\n",
    "\n",
    "#begin button event (go to main page)\n",
    "def beginClick():\n",
    "\n",
    "    \n",
    "    #new page\n",
    "    #cite- https://www.youtube.com/watch?v=qC3FYdpJI5Y&list=PLCC34OHNcOtoC6GglhF3ncJ5rLwQrLGnV&index=14&ab_channel=Codemy.com\n",
    "    #canvas dimensions\n",
    "    HEIGHT = 600\n",
    "    WIDTH = 900\n",
    "\n",
    "    average = '$16,000,000'\n",
    "\n",
    "    #main\n",
    "    main = tk.Toplevel()\n",
    "    main.minsize(WIDTH,HEIGHT)\n",
    "    \n",
    "    #custom font\n",
    "    font1 = tkFont.Font(family=\"Segoe UI Light\",size=16)\n",
    "    main.font = font1\n",
    "\n",
    "    #create canvas\n",
    "    canvas = tk.Canvas(main, height=HEIGHT, width=WIDTH)\n",
    "    canvas.pack()\n",
    "\n",
    "    #title and icon \n",
    "    main.title(\"Phillies Qualifying Offer: One Year Contract\")\n",
    "    main.iconbitmap(\"philliesicon.ico\")\n",
    "\n",
    "    #cite- image not getting garbage collected anymore\n",
    "    #https://stackoverflow.com/questions/26479728/tkinter-canvas-image-not-displaying\n",
    "    #background image\n",
    "    background_image = tk.PhotoImage(file='transparent_bg5.gif')\n",
    "    main.image = background_image\n",
    "    background_label = tk.Label(main, image=background_image)\n",
    "    background_label.place(relwidth=1, relheight=1)\n",
    "\n",
    "    #button events (change to redirecting to different page (phase 2))\n",
    "    #accept button event \n",
    "    def acceptClick():\n",
    "        \n",
    "        #new page\n",
    "        accept_win = tk.Toplevel()\n",
    "        accept_win.minsize(WIDTH,HEIGHT)\n",
    "        accept_win.title(\"Acceptance Page\")\n",
    "        accept_win.iconbitmap(\"philliesicon.ico\")\n",
    "        img = tk.PhotoImage(file='transparent_bg5.gif') #not showing up for some reason\n",
    "        accept_win.img = img\n",
    "        background_label = tk.Label(accept_win, image=img)\n",
    "        background_label.place(relwidth=1, relheight=1)\n",
    "        \n",
    "\n",
    "        #frame that holds the labels and buttons \n",
    "        f = tk.Frame(accept_win, bg = \"black\",  borderwidth=2, relief=\"groove\")\n",
    "        f.place(relx=0.15, rely=0.1, relwidth=0.7, relheight=0.8)\n",
    "        \n",
    "        background_label = tk.Label(f, bg=\"white\")\n",
    "        background_label.place(relwidth=1, relheight=1)\n",
    "        \n",
    "        background_label = tk.Label(f, bg=\"white\", text=\"Congratulations!\\nYou have accepted the qualifying offer.\\nThe Philadelphia Phillies look forward to\\nhaving you again next year!\", pady=10, padx=10, font=\"font1\")\n",
    "        background_label.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)\n",
    "\n",
    "\n",
    "        #exit both windows\n",
    "        #cite: https://stackoverflow.com/questions/55560127/how-to-close-more-than-one-window-with-a-single-click\n",
    "        def qExit():\n",
    "            accept_win.destroy()\n",
    "            main.destroy()\n",
    "            root.destroy()\n",
    "\n",
    "        btn = tk.Button(f, text=\"exit\", bg=\"#f4fdf4\", activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"hand2\", pady=10, padx=10, font=\"font1\", command=qExit).place(relx=0.4, rely=0.8, relwidth=0.2, relheight=0.1) \n",
    "\n",
    "\n",
    "    #decline button event \n",
    "    def declineClick():\n",
    "        \n",
    "        #new page (go to decline page)\n",
    "        decline_win = tk.Toplevel()\n",
    "        decline_win.minsize(WIDTH,HEIGHT)\n",
    "        decline_win.title(\"Decline Page\")\n",
    "        decline_win.iconbitmap(\"philliesicon.ico\")\n",
    "        img = tk.PhotoImage(file='transparent_bg5.gif')\n",
    "        decline_win.img = img\n",
    "        background_label = tk.Label(decline_win, image=img)\n",
    "        background_label.place(relwidth=1, relheight=1)\n",
    "        \n",
    "        \n",
    "        #custom font\n",
    "        font1 = tkFont.Font(family=\"Segoe UI Light\",size=16)\n",
    "        decline_win.font = font1\n",
    "        \n",
    "        #frame that holds the labels and buttons \n",
    "        f = tk.Frame(decline_win, bg = \"black\",  borderwidth=2, relief=\"groove\")\n",
    "        f.place(relx=0.15, rely=0.1, relwidth=0.7, relheight=0.8)\n",
    "        \n",
    "        background_label = tk.Label(f, bg=\"white\")\n",
    "        background_label.place(relwidth=1, relheight=1)\n",
    "        \n",
    "        background_label = tk.Label(f, bg=\"white\", text=\"You have declined the qualifying offer.\\nWe wish you the best of luck!\\n-The Philadelphia Phillies\", pady=10, padx=10, cursor=\"hand2\", font=\"font1\")\n",
    "        background_label.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)\n",
    "        \n",
    "        #exit both windows\n",
    "        #cite: https://stackoverflow.com/questions/55560127/how-to-close-more-than-one-window-with-a-single-click\n",
    "        def qExit():\n",
    "            decline_win.destroy()\n",
    "            main.destroy()\n",
    "            root.destroy()\n",
    "\n",
    "        btn = tk.Button(f, text=\"exit\",  bg=\"#f4fdf4\", activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"hand2\", pady=10, padx=10, font=\"font1\", command=qExit).place(relx=0.4, rely=0.8, relwidth=0.2, relheight=0.1) \n",
    "\n",
    "        \n",
    "    #run average \n",
    "    def runClick():\n",
    "\n",
    "        #show average\n",
    "        average_label = tk.Label(frame1, textvariable=var, bg=\"white\", font=\"font1\")\n",
    "        average_label.place(relx=0.45, rely=0.5, relwidth=0.3, relheight=0.3)\n",
    "        \n",
    "        #enable accept and decline button\n",
    "        #cite: https://stackoverflow.com/questions/53580507/disable-enable-button-in-tkinter\n",
    "        accept_btn[\"state\"]=tk.NORMAL\n",
    "        accept_btn[\"cursor\"]= \"hand2\"\n",
    "        decline_btn[\"state\"]=tk.NORMAL\n",
    "        decline_btn[\"cursor\"]= \"hand2\"\n",
    "        run_btn[\"state\"]=tk.DISABLED\n",
    "        run_btn[\"cursor\"]= \"arrow\"\n",
    "        \n",
    "\n",
    "    #frame that holds the labels and buttons \n",
    "    frame1 = tk.Frame(main, bg = \"white\",  borderwidth=2, relief=\"groove\")\n",
    "    frame1.place(relx=0.15, rely=0.15, relwidth=0.7, relheight=0.3)\n",
    "\n",
    "    #frame that holds the labels and buttons \n",
    "    frame2 = tk.Frame(main, bg = \"white\",  borderwidth=2, relief=\"groove\")\n",
    "    frame2.place(relx=0.15, rely=0.5, relwidth=0.7, relheight=0.3)\n",
    "\n",
    "    #labels\n",
    "    label = tk.Label(frame1, text=\"Click RUN to generate the 2016 qualifying offer\", bg=\"white\",font=\"font1\")\n",
    "    label.place(relx=0.05, rely=0.1, relwidth=0.9, relheight=0.25)\n",
    "\n",
    "    label = tk.Label(frame2, text=\"Would you like to accept the qualifying offer?\", bg=\"white\",font=\"font1\")\n",
    "    label.place(relx=0.05, rely=0.1, relwidth=0.9, relheight=0.25)\n",
    "\n",
    "    #MAIN PAGE accept button\n",
    "    accept_btn = tk.Button(frame2, text=\"accept\", pady=10, padx=10, command=acceptClick, fg=\"black\", bg=\"#f4fdf4\",\n",
    "                          activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"X_cursor\", font=\"font1\", borderwidth=2,\n",
    "                          state=tk.DISABLED)\n",
    "    accept_btn.place(relx=0.15, rely=0.5, relwidth=0.3, relheight=0.3)\n",
    "    \n",
    "    #MAIN PAGE decline button\n",
    "    decline_btn = tk.Button(frame2, text=\"decline\", pady=10, padx=10, command=declineClick, fg=\"black\", bg=\"#f6ced2\",\n",
    "                           activebackground=\"#d3808a\", activeforeground=\"black\", cursor=\"X_cursor\",font=\"font1\", borderwidth=2,\n",
    "                           state=tk.DISABLED)\n",
    "    decline_btn.place(relx=0.55, rely=0.5, relwidth=0.3, relheight=0.3)\n",
    "    \n",
    "    #MAIN PAGE run button\n",
    "    run_btn = tk.Button(frame1, text=\"run\", pady=10, padx=10, command=runClick, fg=\"black\", bg=\"white\", activebackground=\"grey\",\n",
    "                       activeforeground=\"black\",cursor=\"hand2\", font=\"font1\", borderwidth=2)\n",
    "    run_btn.place(relx=0.15, rely=0.5, relwidth=0.2, relheight=0.3)\n",
    "    \n",
    "    #MAIN PAGE exit button\n",
    "    btn = tk.Button(main, text=\"exit\", bg=\"white\", activebackground=\"grey\", activeforeground=\"black\",cursor=\"hand2\", pady=10, padx=10, font=\"font1\", command=root.destroy).place(relx=0.3, rely=0.85, relwidth=0.4, relheight=0.1) \n",
    "\n",
    "\n",
    "\n",
    "'''welcome page: HELP btn event '''\n",
    "    \n",
    "def helpClick():\n",
    "    \n",
    "    #new page (go to decline page)\n",
    "    help_win = tk.Toplevel()\n",
    "    help_win.minsize(WIDTH,HEIGHT)\n",
    "    help_win.title(\"Help Page\")\n",
    "    help_win.iconbitmap(\"philliesicon.ico\")\n",
    "    img = tk.PhotoImage(file='transparent_bg5.gif')\n",
    "    help_win.img = img\n",
    "    background_label = tk.Label(help_win, image=img)\n",
    "    background_label.place(relwidth=1, relheight=1)\n",
    "    \n",
    "    #custom font\n",
    "    font1 = tkFont.Font(family=\"Segoe UI Light\",size=16)\n",
    "    help_win.font = font1\n",
    "    \n",
    "    #frame that holds the labels and buttons \n",
    "    f = tk.Frame(help_win, bg = \"black\",  borderwidth=2, relief=\"groove\")\n",
    "    f.place(relx=0.075, rely=0.1, relwidth=0.85, relheight=0.8)\n",
    "    \n",
    "    background_label = tk.Label(f, bg=\"white\")\n",
    "    background_label.place(relwidth=1, relheight=1)\n",
    "    \n",
    "    background_label = tk.Label(f, bg=\"white\", text=\"A departing free agent player may be provided a qualifying offer.\\n\"\n",
    "                                \"A qualifying offer is a one year contract whose monetary value is\\n\"\n",
    "                                \"the average of the top 125 highest paid players.  Players have the\\n\"\n",
    "                                \"option to accept or reject the qualifying offer. Teams that extend\\n\"\n",
    "                                \"a qualifying offer risk forfeiting a draft pick if the player rejects the\\noffer.\", pady=10, padx=10, font=\"font1\",justify=\"left\")\n",
    "    background_label.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)\n",
    "    \n",
    "    #back\n",
    "    btn = tk.Button(f, text=\"back\", bg=\"#f4fdf4\", activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"hand2\", pady=10, padx=10, font=\"font1\", command=help_win.destroy).place(relx=0.4, rely=0.8, relwidth=0.2, relheight=0.1) \n",
    "    \n",
    "'''welcome page: buttons'''\n",
    "\n",
    "#buttons\n",
    "#begin button (go to main page)\n",
    "begin_btn = tk.Button(frame1, text=\"begin\", pady=10, padx=10, command=beginClick, fg=\"black\", bg=\"#f4fdf4\",\n",
    "                      activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"hand2\", font=\"font1\", borderwidth=2)\n",
    "begin_btn.place(relx=0.15, rely=0.5, relwidth=0.3, relheight=0.3)\n",
    "\n",
    "#help button\n",
    "help_btn = tk.Button(frame1, text=\"help\", pady=10, padx=10, command=helpClick, fg=\"black\", bg=\"#f4fdf4\",\n",
    "                      activebackground=\"#b1d3b1\", activeforeground=\"black\",cursor=\"hand2\", font=\"font1\", borderwidth=2)\n",
    "help_btn.place(relx=0.55, rely=0.5, relwidth=0.3, relheight=0.3)\n",
    "    \n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
